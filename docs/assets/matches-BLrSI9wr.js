import{s}from"./dataManager-Dh_x4Yn9.js";new Date().toISOString().slice(0,10);async function G(n){var d,c;try{if(console.log(`Starting deletion of match ${n}`),n==null)throw new Error("No match ID provided for deletion");console.log(`Processing match ID for deletion: ${n} (type: ${typeof n})`);let t;if(typeof n=="string"){if(n.trim()==="")throw new Error("Empty string provided as match ID");if(t=parseInt(n,10),isNaN(t))throw new Error(`Invalid match ID string: "${n}" cannot be converted to number`)}else if(typeof n=="bigint"){const e=Number(n);BigInt(e)===n?t=e:t=n}else if(typeof n=="number")t=n;else throw new Error(`Unsupported match ID type: ${typeof n}. Expected string, number, or bigint.`);const S=typeof t=="number"&&Number.isInteger(t)&&t>0,A=typeof t=="bigint"&&t>0n;if(!S&&!A)throw new Error(`Invalid match ID after conversion: ${t} (type: ${typeof t}). Must be a positive integer.`);console.log(`Converted match ID: ${t} (type: ${typeof t})`);const{data:y,error:w}=await s.from("matches").select("date,prizeaek,prizereal,goalslista,goalslistb,manofthematch,yellowa,reda,yellowb,redb").eq("id",t);if(w)throw console.error("Error fetching match:",w),w;if(!y||y.length===0){const e=`Match with ID ${t} not found in database`;throw console.error(e),new Error(e)}const o=y[0];o.date||console.warn(`Match ${t} has no date - this may cause issues with transaction cleanup`),console.log("Deleting match data:",o);const I={financialChanges:[],playerGoalChanges:[],sdsChanges:[]};console.log(`Fetching transactions for match ${t} before deletion`);const{data:R,error:$}=await s.from("transactions").select("team,amount,type").eq("match_id",t);if($)throw console.error("Error fetching transactions:",$),$;const f=R||[];if(console.log(`Found ${f.length} transactions to reverse:`,f.map(e=>`${e.type}: ${e.amount} (${e.team})`)),console.log(`Reversing financial changes for ${(f==null?void 0:f.length)||0} transactions`),f&&f.length>0)for(const e of f)if(e.type==="Echtgeld-Ausgleich"){const{data:l,error:r}=await s.from("finances").select("debt").eq("team",e.team);if(r){console.error(`Error fetching finances for team ${e.team}:`,r);continue}const a=l&&l.length>0?l[0]:null,h=(a==null?void 0:a.debt)||0;let i=h-e.amount;i<0&&(i=0),I.financialChanges.push({team:e.team,type:"debt",oldValue:h,newValue:i}),await s.from("finances").update({debt:i}).eq("team",e.team)}else{const{data:l,error:r}=await s.from("finances").select("balance").eq("team",e.team);if(r){console.error(`Error fetching finances for team ${e.team}:`,r);continue}const a=l&&l.length>0?l[0]:null,h=(a==null?void 0:a.balance)||0;let i=h-e.amount;i<0&&(i=0),I.financialChanges.push({team:e.team,type:"balance",oldValue:h,newValue:i}),await s.from("finances").update({balance:i}).eq("team",e.team)}if(typeof o.prizeaek=="number"&&o.prizeaek!==0){const{data:e,error:l}=await s.from("finances").select("balance").eq("team","AEK");if(l)console.error("Error fetching AEK finances:",l);else if(e&&e.length>0){const r=e[0];let a=((r==null?void 0:r.balance)||0)-o.prizeaek;a<0&&(a=0),await s.from("finances").update({balance:a}).eq("team","AEK")}}if(typeof o.prizereal=="number"&&o.prizereal!==0){const{data:e,error:l}=await s.from("finances").select("balance").eq("team","Real");if(l)console.error("Error fetching Real finances:",l);else if(e&&e.length>0){const r=e[0];let a=((r==null?void 0:r.balance)||0)-o.prizereal;a<0&&(a=0),await s.from("finances").update({balance:a}).eq("team","Real")}}console.log(`Deleting ${(f==null?void 0:f.length)||0} transactions for match ${t}`);const{error:b}=await s.from("transactions").delete().eq("match_id",t);if(b)throw console.error("Error deleting transactions:",b),b;const{data:g,error:M}=await s.from("transactions").select("id").eq("match_id",t);if(M)console.warn("Could not verify transaction deletion:",M);else{if(g&&g.length>0)throw console.error(`‚ùå Failed to delete ${g.length} transactions for match ${t}`),new Error(`Transaction deletion incomplete: ${g.length} transactions still exist`);console.log(`‚úÖ Successfully deleted all transactions for match ${t}`)}const q=async(e,l)=>{if(!e||!Array.isArray(e))return;const r={};if(e.length>0&&typeof e[0]=="object"&&e[0].player!==void 0)e.forEach(a=>{a.player&&(r[a.player]=(r[a.player]||0)+(a.count||1))});else for(const a of e)a&&(r[a]=(r[a]||0)+1);for(const[a,h]of Object.entries(r)){const{data:i,error:m}=await s.from("players").select("goals").eq("name",a).eq("team",l);if(m){console.error(`Error fetching player ${a} for goal removal:`,m);continue}if(!i||i.length===0){console.warn(`Player ${a} not found in team ${l} for goal removal`);continue}const p=i[0];let u=((p==null?void 0:p.goals)||0)-h;u<0&&(u=0);const{error:D}=await s.from("players").update({goals:u}).eq("name",a).eq("team",l);D?console.error(`Error updating goals for player ${a}:`,D):console.log(`‚úÖ Updated goals for ${a} (${l}): ${p.goals} ‚Üí ${u}`)}};if(await q(o.goalslista,"AEK"),await q(o.goalslistb,"Real"),o.manofthematch){let e=null;const l=(r,a)=>!r||!r.length?!1:typeof r[0]=="object"&&r[0].player!==void 0?r.some(h=>h.player===a):r.includes(a);if(l(o.goalslista,o.manofthematch))e="AEK";else if(l(o.goalslistb,o.manofthematch))e="Real";else{const{data:r,error:a}=await s.from("players").select("team").eq("name",o.manofthematch);a?console.error(`Error fetching player ${o.manofthematch} for team lookup:`,a):r&&r.length>0?e=r[0].team:console.warn(`Player ${o.manofthematch} not found for SdS team determination`)}if(e){const{data:r,error:a}=await s.from("spieler_des_spiels").select("count").eq("name",o.manofthematch).eq("team",e);if(a)console.error(`Error fetching SdS entry for ${o.manofthematch}:`,a);else if(r&&r.length>0){const h=r[0],i=Math.max(0,h.count-1),{error:m}=await s.from("spieler_des_spiels").update({count:i}).eq("name",o.manofthematch).eq("team",e);m?console.error(`Error updating SdS count for ${o.manofthematch}:`,m):console.log(`‚úÖ Updated SdS count for ${o.manofthematch} (${e}): ${h.count} ‚Üí ${i}`)}else console.warn(`SdS entry for ${o.manofthematch} in team ${e} not found`)}}(o.yellowa>0||o.reda>0||o.yellowb>0||o.redb>0)&&console.log(`Match had cards: AEK(${o.yellowa}Y,${o.reda}R) Real(${o.yellowb}Y,${o.redb}R)`),console.log(`Deleting match ${t} from matches table`);const{error:E}=await s.from("matches").delete().eq("id",t);if(E)throw console.error("Error deleting match:",E),E;const{data:v,error:k}=await s.from("matches").select("id").eq("id",t);if(k)console.warn("Could not verify match deletion:",k);else{if(v&&v.length>0)throw console.error(`‚ùå Failed to delete match ${t}`),new Error(`Match deletion failed: match ${t} still exists`);console.log(`‚úÖ Successfully deleted match ${t}`)}console.log(`‚úÖ Successfully deleted match ${t} and all related data`),console.log(`üìã Deletion Summary for Match ${t}:`),console.log("   - Match record: deleted"),console.log(`   - Transactions: ${f.length} deleted`),console.log(`   - Player goals: updated for ${((d=o.goalslista)==null?void 0:d.length)||0} AEK + ${((c=o.goalslistb)==null?void 0:c.length)||0} Real goals`),console.log(`   - Player of the match: ${o.manofthematch?"updated":"none"}`),console.log(`   - Prize money: AEK ${o.prizeaek||0}, Real ${o.prizereal||0} (reversed)`),console.log(`   - Match date: ${o.date}`)}catch(t){throw console.error(`Failed to delete match ${typeof matchId<"u"?matchId:n||"unknown"}:`,t),console.error("Error details:",{matchId:typeof matchId<"u"?matchId:"undefined",matchIdType:typeof matchId,originalId:n,originalIdType:typeof n,errorMessage:t.message,errorStack:t.stack}),typeof window>"u"&&console.log(`Fehler beim L√∂schen des Spiels: ${t.message}`),t}}window.showMatchStatistics=function(){if(matches.length===0){alert("üìä Keine Spiele vorhanden f√ºr Statistiken");return}const n={totalMatches:matches.length,aekWins:matches.filter(c=>(c.goalsa||0)>(c.goalsb||0)).length,realWins:matches.filter(c=>(c.goalsb||0)>(c.goalsa||0)).length,draws:matches.filter(c=>(c.goalsa||0)===(c.goalsb||0)).length,totalGoals:matches.reduce((c,t)=>c+(t.goalsa||0)+(t.goalsb||0),0),highestScore:Math.max(...matches.map(c=>Math.max(c.goalsa||0,c.goalsb||0))),averageGoals:0};n.averageGoals=(n.totalGoals/n.totalMatches).toFixed(1);const d=`üèÜ Match-Statistiken:

Gesamt: ${n.totalMatches} Spiele
AEK Siege: ${n.aekWins}
Real Siege: ${n.realWins}
Unentschieden: ${n.draws}

Tore gesamt: ${n.totalGoals}
√ò Tore/Spiel: ${n.averageGoals}
H√∂chstes Ergebnis: ${n.highestScore} Tore`;alert(d)};export{G as deleteMatch};
