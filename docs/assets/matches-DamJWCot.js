import{s as d}from"./dataManager-C8rOmH55.js";class O{constructor(){this.activeModals=new Map,this.modalStack=[],this.isAnimating=!1,this.baseZIndex=1050}createModal(o,t,e={}){const c={id:o,content:t,element:null,options:{closeOnEscape:!0,closeOnBackdrop:!0,showCloseButton:!0,size:"default",className:"",animation:"slideUp",...e}};return this.activeModals.set(o,c),c}async showModal(o){this.isAnimating&&await new Promise(c=>setTimeout(c,100));const t=this.activeModals.get(o);if(!t)return;this.isAnimating=!0,t.element=this.createModalElement(t),document.body.appendChild(t.element),this.modalStack.push(o);const e=this.baseZIndex+this.modalStack.length;t.element.style.zIndex=e,this.modalStack.length===1&&(document.body.style.overflow="hidden"),await this.animateModalIn(t.element,t.options.animation),this.isAnimating=!1,this.addModalEventListeners(t)}async hideModal(o=null){if(this.isAnimating)return;const t=o||this.modalStack[this.modalStack.length-1];if(!t)return;const e=this.activeModals.get(t);if(!e||!e.element)return;this.isAnimating=!0,await this.animateModalOut(e.element,e.options.animation),e.element.parentNode&&e.element.parentNode.removeChild(e.element);const c=this.modalStack.indexOf(t);c>-1&&this.modalStack.splice(c,1),this.modalStack.length===0&&(document.body.style.overflow=""),this.activeModals.delete(t),this.isAnimating=!1}createModalElement(o){const t=document.createElement("div");t.className=`modal-overlay modal-mobile-safe ${o.options.className}`,t.dataset.modalId=o.id;const e=document.createElement("div");if(e.className=`modal-content ${this.getSizeClass(o.options.size)}`,e.onclick=u=>u.stopPropagation(),o.options.showCloseButton){const u=document.createElement("button");u.className="modal-close",u.innerHTML='<i class="fas fa-times"></i>',u.onclick=()=>this.hideModal(o.id),e.appendChild(u)}const c=document.createElement("div");return c.className="modal-body",c.innerHTML=o.content,e.appendChild(c),t.appendChild(e),o.options.closeOnBackdrop&&(t.onclick=()=>this.hideModal(o.id)),t}getSizeClass(o){switch(o){case"small":return"modal-content-small";case"large":return"large-modal-content";case"player":return"player-detail-modal-content";case"match":return"match-modal-content";default:return""}}async animateModalIn(o,t){o.style.opacity="0",await new Promise(e=>{requestAnimationFrame(()=>{o.style.opacity="1",o.style.animation=this.getInAnimation(t);const c=()=>{o.removeEventListener("animationend",c),e()};o.addEventListener("animationend",c)})})}async animateModalOut(o,t){await new Promise(e=>{o.style.animation=this.getOutAnimation(t);const c=()=>{o.removeEventListener("animationend",c),e()};o.addEventListener("animationend",c)})}getInAnimation(o){switch(o){case"slideUp":return"modalSlideUp 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)";case"fadeIn":return"modalOverlayFadeIn 0.3s ease-out";case"scaleIn":return"modalScaleIn 0.3s ease-out";default:return"modalSlideUp 0.4s cubic-bezier(0.34, 1.56, 0.64, 1)"}}getOutAnimation(o){switch(o){case"slideUp":return"modalSlideOut 0.3s ease-in";case"fadeIn":return"modalFadeOut 0.2s ease-in";case"scaleIn":return"modalScaleOut 0.2s ease-in";default:return"modalSlideOut 0.3s ease-in"}}addModalEventListeners(o){if(o.options.closeOnEscape){const t=e=>{e.key==="Escape"&&this.modalStack[this.modalStack.length-1]===o.id&&(this.hideModal(o.id),document.removeEventListener("keydown",t))};document.addEventListener("keydown",t)}}hideAllModals(){[...this.modalStack].reverse().forEach(t=>this.hideModal(t))}hasOpenModals(){return this.modalStack.length>0}}const E=new O;function N(l,o={}){const t="legacy-modal-"+Date.now();E.createModal(t,l,o),E.showModal(t)}function x(){E.hideModal()}window.hideModal=x;window.showModal=N;window.modalManager=E;new Date().toISOString().slice(0,10);async function R(l){var o,t;try{if(console.log(`Starting deletion of match ${l}`),l==null)throw new Error("No match ID provided for deletion");console.log(`Processing match ID for deletion: ${l} (type: ${typeof l})`);let e;if(typeof l=="string"){if(l.trim()==="")throw new Error("Empty string provided as match ID");if(e=parseInt(l,10),isNaN(e))throw new Error(`Invalid match ID string: "${l}" cannot be converted to number`)}else if(typeof l=="bigint"){const a=Number(l);BigInt(a)===l?e=a:e=l}else if(typeof l=="number")e=l;else throw new Error(`Unsupported match ID type: ${typeof l}. Expected string, number, or bigint.`);const c=typeof e=="number"&&Number.isInteger(e)&&e>0,u=typeof e=="bigint"&&e>0n;if(!c&&!u)throw new Error(`Invalid match ID after conversion: ${e} (type: ${typeof e}). Must be a positive integer.`);console.log(`Converted match ID: ${e} (type: ${typeof e})`);const{data:$,error:b}=await d.from("matches").select("date,prizeaek,prizereal,goalslista,goalslistb,manofthematch,yellowa,reda,yellowb,redb").eq("id",e);if(b)throw console.error("Error fetching match:",b),b;if(!$||$.length===0){const a=`Match with ID ${e} not found in database`;throw console.error(a),new Error(a)}const r=$[0];r.date||console.warn(`Match ${e} has no date - this may cause issues with transaction cleanup`),console.log("Deleting match data:",r);const I={financialChanges:[],playerGoalChanges:[],sdsChanges:[]};console.log(`Fetching transactions for match ${e} before deletion`);const{data:D,error:M}=await d.from("transactions").select("team,amount,type").eq("match_id",e);if(M)throw console.error("Error fetching transactions:",M),M;const h=D||[];if(console.log(`Found ${h.length} transactions to reverse:`,h.map(a=>`${a.type}: ${a.amount} (${a.team})`)),console.log(`Reversing financial changes for ${(h==null?void 0:h.length)||0} transactions`),h&&h.length>0)for(const a of h)if(a.type==="Echtgeld-Ausgleich"){const{data:i,error:s}=await d.from("finances").select("debt").eq("team",a.team);if(s){console.error(`Error fetching finances for team ${a.team}:`,s);continue}const n=i&&i.length>0?i[0]:null,f=(n==null?void 0:n.debt)||0;let m=f-a.amount;m<0&&(m=0),I.financialChanges.push({team:a.team,type:"debt",oldValue:f,newValue:m}),await d.from("finances").update({debt:m}).eq("team",a.team)}else{const{data:i,error:s}=await d.from("finances").select("balance").eq("team",a.team);if(s){console.error(`Error fetching finances for team ${a.team}:`,s);continue}const n=i&&i.length>0?i[0]:null,f=(n==null?void 0:n.balance)||0;let m=f-a.amount;m<0&&(m=0),I.financialChanges.push({team:a.team,type:"balance",oldValue:f,newValue:m}),await d.from("finances").update({balance:m}).eq("team",a.team)}if(typeof r.prizeaek=="number"&&r.prizeaek!==0){const{data:a,error:i}=await d.from("finances").select("balance").eq("team","AEK");if(i)console.error("Error fetching AEK finances:",i);else if(a&&a.length>0){const s=a[0];let n=((s==null?void 0:s.balance)||0)-r.prizeaek;n<0&&(n=0),await d.from("finances").update({balance:n}).eq("team","AEK")}}if(typeof r.prizereal=="number"&&r.prizereal!==0){const{data:a,error:i}=await d.from("finances").select("balance").eq("team","Real");if(i)console.error("Error fetching Real finances:",i);else if(a&&a.length>0){const s=a[0];let n=((s==null?void 0:s.balance)||0)-r.prizereal;n<0&&(n=0),await d.from("finances").update({balance:n}).eq("team","Real")}}console.log(`Deleting ${(h==null?void 0:h.length)||0} transactions for match ${e}`);const{error:S}=await d.from("transactions").delete().eq("match_id",e);if(S)throw console.error("Error deleting transactions:",S),S;const{data:p,error:k}=await d.from("transactions").select("id").eq("match_id",e);if(k)console.warn("Could not verify transaction deletion:",k);else{if(p&&p.length>0)throw console.error(`❌ Failed to delete ${p.length} transactions for match ${e}`),new Error(`Transaction deletion incomplete: ${p.length} transactions still exist`);console.log(`✅ Successfully deleted all transactions for match ${e}`)}const A=async(a,i)=>{if(!a||!Array.isArray(a))return;const s={};if(a.length>0&&typeof a[0]=="object"&&a[0].player!==void 0)a.forEach(n=>{n.player&&(s[n.player]=(s[n.player]||0)+(n.count||1))});else for(const n of a)n&&(s[n]=(s[n]||0)+1);for(const[n,f]of Object.entries(s)){const{data:m,error:g}=await d.from("players").select("goals").eq("name",n).eq("team",i);if(g){console.error(`Error fetching player ${n} for goal removal:`,g);continue}if(!m||m.length===0){console.warn(`Player ${n} not found in team ${i} for goal removal`);continue}const w=m[0];let y=((w==null?void 0:w.goals)||0)-f;y<0&&(y=0);const{error:C}=await d.from("players").update({goals:y}).eq("name",n).eq("team",i);C?console.error(`Error updating goals for player ${n}:`,C):console.log(`✅ Updated goals for ${n} (${i}): ${w.goals} → ${y}`)}};if(await A(r.goalslista,"AEK"),await A(r.goalslistb,"Real"),r.manofthematch){let a=null;const i=(s,n)=>!s||!s.length?!1:typeof s[0]=="object"&&s[0].player!==void 0?s.some(f=>f.player===n):s.includes(n);if(i(r.goalslista,r.manofthematch))a="AEK";else if(i(r.goalslistb,r.manofthematch))a="Real";else{const{data:s,error:n}=await d.from("players").select("team").eq("name",r.manofthematch);n?console.error(`Error fetching player ${r.manofthematch} for team lookup:`,n):s&&s.length>0?a=s[0].team:console.warn(`Player ${r.manofthematch} not found for SdS team determination`)}if(a){const{data:s,error:n}=await d.from("spieler_des_spiels").select("count").eq("name",r.manofthematch).eq("team",a);if(n)console.error(`Error fetching SdS entry for ${r.manofthematch}:`,n);else if(s&&s.length>0){const f=s[0],m=Math.max(0,f.count-1),{error:g}=await d.from("spieler_des_spiels").update({count:m}).eq("name",r.manofthematch).eq("team",a);g?console.error(`Error updating SdS count for ${r.manofthematch}:`,g):console.log(`✅ Updated SdS count for ${r.manofthematch} (${a}): ${f.count} → ${m}`)}else console.warn(`SdS entry for ${r.manofthematch} in team ${a} not found`)}}(r.yellowa>0||r.reda>0||r.yellowb>0||r.redb>0)&&console.log(`Match had cards: AEK(${r.yellowa}Y,${r.reda}R) Real(${r.yellowb}Y,${r.redb}R)`),console.log(`Deleting match ${e} from matches table`);const{error:v}=await d.from("matches").delete().eq("id",e);if(v)throw console.error("Error deleting match:",v),v;const{data:q,error:z}=await d.from("matches").select("id").eq("id",e);if(z)console.warn("Could not verify match deletion:",z);else{if(q&&q.length>0)throw console.error(`❌ Failed to delete match ${e}`),new Error(`Match deletion failed: match ${e} still exists`);console.log(`✅ Successfully deleted match ${e}`)}console.log(`✅ Successfully deleted match ${e} and all related data`),console.log(`📋 Deletion Summary for Match ${e}:`),console.log("   - Match record: deleted"),console.log(`   - Transactions: ${h.length} deleted`),console.log(`   - Player goals: updated for ${((o=r.goalslista)==null?void 0:o.length)||0} AEK + ${((t=r.goalslistb)==null?void 0:t.length)||0} Real goals`),console.log(`   - Player of the match: ${r.manofthematch?"updated":"none"}`),console.log(`   - Prize money: AEK ${r.prizeaek||0}, Real ${r.prizereal||0} (reversed)`),console.log(`   - Match date: ${r.date}`)}catch(e){throw console.error(`Failed to delete match ${typeof matchId<"u"?matchId:l||"unknown"}:`,e),console.error("Error details:",{matchId:typeof matchId<"u"?matchId:"undefined",matchIdType:typeof matchId,originalId:l,originalIdType:typeof l,errorMessage:e.message,errorStack:e.stack}),typeof window>"u"&&console.log(`Fehler beim Löschen des Spiels: ${e.message}`),e}}window.showMatchStatistics=function(){if(matches.length===0){alert("📊 Keine Spiele vorhanden für Statistiken");return}const l={totalMatches:matches.length,aekWins:matches.filter(t=>(t.goalsa||0)>(t.goalsb||0)).length,realWins:matches.filter(t=>(t.goalsb||0)>(t.goalsa||0)).length,draws:matches.filter(t=>(t.goalsa||0)===(t.goalsb||0)).length,totalGoals:matches.reduce((t,e)=>t+(e.goalsa||0)+(e.goalsb||0),0),highestScore:Math.max(...matches.map(t=>Math.max(t.goalsa||0,t.goalsb||0))),averageGoals:0};l.averageGoals=(l.totalGoals/l.totalMatches).toFixed(1);const o=`🏆 Match-Statistiken:

Gesamt: ${l.totalMatches} Spiele
AEK Siege: ${l.aekWins}
Real Siege: ${l.realWins}
Unentschieden: ${l.draws}

Tore gesamt: ${l.totalGoals}
Ø Tore/Spiel: ${l.averageGoals}
Höchstes Ergebnis: ${l.highestScore} Tore`;alert(o)};export{R as deleteMatch};
